@using Flurl.Http;
@using ShikkhanobishBlazor.Models
@using System.Globalization
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@page "/ApiCodeGenaretor"



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">

</head>

<body>

    <!-- Begin page -->
    <div id="wrapper" style="background-color: #F7F7F7; ">-
        <!-- LOGO -->

        <div class="logo-box mt-2 m-0 ml-0">
            <a href="Count" class="">

                <img src="/images/snImg.jpg" style="display: block; margin-left: auto; margin-right: auto; width: 50px;height:50px;">

            </a>
        </div>
        <!-- Topbar Start -->
        <div class="navbar-custom">
            <ul class="list-unstyled topnav-menu float-right mb-0">
                <li class="dropdown notification-list">
                    <a class="nav-link dropdown-toggle nav-user mr-0" data-toggle="dropdown" href="#" role="button" aria-haspopup="false" aria-expanded="false">
                        <img src="/images/images.png" alt="user-image" class="rounded-circle" />
                        <span class="pro-user-name ml-1"> <i class="mdi mdi-chevron-down"></i> @userName</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right profile-dropdown">
                        <!-- item-->
                        <a href="javascript:void(0);" class="dropdown-item notify-item">
                            <i class="mdi mdi-logout-variant"></i>
                            <span @onclick="Logout">Logout</span>
                        </a>
                    </div>
                </li>
            </ul>

            <ul class="list-unstyled topnav-menu topnav-menu-left m-0">
                <li>
                    <button class="button-menu-mobile">
                        <i class="mdi mdi-menu"></i>
                    </button>
                </li>
            </ul>
        </div>
        <!-- end Topbar -->
        <!-- Left Sidebar Start  -->
        <div class="left-side-menu">
            <div class="user-box">
                <div class="float-left">
                    <img src="/images/images.png" alt="" class="avatar-md rounded-circle" />
                </div>
                <div class="user-info">
                    <a href="#">@userName</a>
                </div>
            </div>

            <!--- Sidemenu -->
            <div id="sidebar-menu">
                <ul class="metismenu" id="side-menu">
                    <li class="menu-title">Navigation</li>
                    <li>
                        <a href="https://dashboard.shikkhanobish.com/index.html">
                            <i class="fas fa-home"></i>
                            <span> Dashboard </span>
                        </a>
                    </li>
                    <li>
                        <a href="Count">
                            <i class="fas fa-calculator"></i>
                            <span> Count </span>
                        </a>
                    </li>
                    <li>
                        <a href="Questions">
                            <i class="far fa-question-circle"></i>
                            <span> Question </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherApproval">
                            <i class="fas fa-user-alt"></i>
                            <span> Teacher Qn. Approval </span>
                        </a>
                    </li>
                    <li>
                        <a href="ActiveTeacher">
                            <i class="fas fa-lightbulb"></i>
                            <span> Active Teacher </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherWithdraw">
                            <i class="fas fa-money-bill-wave-alt"></i>
                            <span> Teacher Withdraw </span>
                        </a>
                    </li>
                    <li>
                        <a href="SendMessage">
                            <i class="far fa-share-square"></i>
                            <span> Send Message </span>
                        </a>
                    </li>
                    <li>
                        <a href="RndNumGenerator">
                            <i class="fas fa-pen-nib"></i>
                            <span> Data Operator </span>
                        </a>
                    </li>
                    <li>
                        <a href="ApiCodeGenaretor">
                            <i class="fas fa-code"></i>
                            <span> Code Genaretor</span>
                        </a>
                    </li>

                </ul>

            </div>
            <!-- End Sidebar -->

            <div class="clearfix"></div>
        </div>
        <!-- Left Sidebar End -->
        <!-- ============================================================== -->
        <!-- Start Page Content here -->
        <!-- ============================================================== -->

        <div class="content-page">

            <div class="content">
                <div class="form-group row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <label style="font-size:30px;" class="card-title">Add New Class</label>
                                <div class="form-group row">
                                    <div class="col-12">
                                        <div class="input-group input-group-sm mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text" id="inputGroup-sizing-sm">Class Name</span>
                                            </div>
                                            <input type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" @bind="clsName">
                                        </div>

                                    </div>
                                </div>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="form-group row">
                                            <div class="col-9">
                                                <input class="form-control" placeholder="Parameter" @bind="@singleTableItemTextBox" />
                                                <br />
                                                <div class="form-group row">
                                                    <div class="col-3">
                                                        <button class="btn @intbtnColor btn-sm" @onclick="makeThisparameterInt">int</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn @stringbtnColor btn-sm" @onclick="makeThisparameterString">string</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn @doublebtnColor btn-sm" @onclick="makeThisparameterDouble">Double</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn  @floatbtnColor btn-sm" @onclick="makeThisparameterFloat">Float</button>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <button class="btn mb-2 mb-md-0 btn-primary btn-block btn-round" @onclick="AddTableItem_Click">Add</button>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="input-group input-group-sm mb-3" style="display: @showNvarchar">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text" id="inputGroup-sizing-sm">Nvarchar Count</span>
                                                </div>
                                                <input type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" @bind="nvarcharChount">
                                            </div>
                                        </div>
                                    </div>
                                </div>


                            </div>

                             <div class="card">
                            <div class="card-body">
                                <label style="color: red; font-size: 11px">@errorTxt</label>
                                <label class="card-title">Class Preview</label><br />
                                <label style="font-size: 14px">Name: <b style="font-size: 16px">@clsName</b></label>
                                <br />
                                @foreach (var item in ShowParameter)
                                {
                                    <div class="form-group row">
                                        <div class="col-6">
                                            <label style="font-size: 14px"><b>@item</b></label>
                                        </div>
                                        <div class="col-6">
                                            <button class="btn btn-outline-danger btn-sm" @onclick="@(  () =>  RemoveParameter(item))">Remove</button><br />
                                        </div>
                                    </div>

                                }

                                <div style="align-items: end">
                                    <button class="btn btn-success btn-block btn-round" @onclick="SetClass">@saveservertxt</button>
                                </div>
                            </div>
                        </div>
                        </div>                                              
                    </div>
                   
                </div>
                <div>
                   

                </div>

                <div class="card">
                            <div class="card-body">
                                <div class="card-title">
                                    <label>Code Preview</label>
                                    <select class="form-control btn btn-purple" style="" id="class" @onchange="genClassSelectedTable">                                               
                                                <option class="">Select Class</option>
                                                @foreach (var item in allClassGen)
                                                {
                                                    <option value="@item.tableName">@item.tableName</option>
                                                }
                                            </select>
                                     <div class="card" style="display: @showreviewcodedisplay">
                            <div class="card-body">
                                
                                 <div class="form-group row">
                                      <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">C#</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Class</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(1))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)showMakeClassCode)</code></p>
                                                 </div>
                                        </div>                              
                                    </div>
                                     <div class="col-6">
                                       <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">SQL</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">SQL Table</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(2))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showMakeSQLCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                    <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">C#</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Get Api</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(3))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showGetApiCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                   
                                      <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">C#</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Get With ID Api</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(4))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showGetWIDApiCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                    <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">C#</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Set Api</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(5))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showSetApiCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                    <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">SQL</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Get Procedure</h5
                                                         <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(6))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showGetProCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                    <div class="col-6">
                                       <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">SQL</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Get With ID Precedure</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(7))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showGetWithIDProCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>
                                    <div class="col-6">
                                        <div class="card text-white mb-3 border-success shadow-lg rounded" style="background-color: #323232">
                                            <div class="card-header" style="background-color: #3C3C3C">SQL</div>
                                                 <div class="card-body">
                                                     <h5 class="card-title text-white">Det Precedure</h5>
                                                     <button class="btn btn-success" @onclick="@(() =>copymakeClassCode(8))">Copy Code</button>
                                                     <p class="card-text"><code>@((MarkupString)@showSetProCode)</code></p>
                                                 </div>
                                        </div>   
                                    </div>

                                </div>
                               

                            </div>
                        </div>
                                   

                                </div>
                            </div>
                        </div>
                 <div class="card">
                        <div class="card-body">
                            <div class="card-title">
                                Class Table
                        </div>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Table ID</th>
                                    <th scope="col">Table Name</th>
                                    <th scope="col">No. Of Parameter</th>             
                                    <th scope="col">Edit</th>
                                    <th scope="col">Delete</th>
                                   
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var item in allClassGen){
                                     <tr>
                                        <td>@item.ID</td>
                                        <td>@item.tableName</td>
                                        <td>@item.PrNumber</td>
                                        <td><button class="btn btn-info" data-toggle="modal" data-target="#parametermodel" @onclick="@( () =>  ShowParameterList(item))"> Edit</button></td>
                                        <td><button class="btn btn-danger" @onclick="@( () =>  RemoveClass(item.ID))">Delete</button></td>

                                </tr>
                                }
                               

                            </tbody>
                        </table>

                        </div>
                    </div>
                    <!-- Button trigger modal -->

<!-- Modal All Parameter-->
<div class="modal fade" id="parametermodel" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLongTitle"></h5>
        <b>@showparameterclass.tableName</b> Parameter Count: @showparameterclass.PrNumber
      </div>
      <div class="modal-body">
        <div class="form-group row">
            <button class="col-6 btn btn-primary" @onclick="addpapa">Add Parameter</button>
            <button class="col-6 btn btn-primary" @onclick="editPara">Edit Parameter</button>
           
        </div>

        <div style="display:@showeditoraddpara">
           <div class="card">
               
                                    <div class="card-body">
                                        <div class="form-group row">
                                            <div class="col-12">
                                                <input class="form-control" placeholder="Parameter No. (Existing)" @bind="@singleTableItemTextBoxExist" style="display:@showeditinput" />
                                                <br/>
                                                <input class="form-control" placeholder="Parameter Name New" @bind="@singleTableItemTextBox" />
                                                <br />
                                                <div class="form-group row">
                                                    <div class="col-3">
                                                        <button class="btn @intbtnColor btn-sm" @onclick="makeThisparameterInt">int</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn @stringbtnColor btn-sm" @onclick="makeThisparameterString">string</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn @doublebtnColor btn-sm" @onclick="makeThisparameterDouble">Double</button>
                                                    </div>
                                                    <div class="col-3">
                                                        <button class="btn  @floatbtnColor btn-sm" @onclick="makeThisparameterFloat">Float</button>
                                                    </div>

                                                </div>
                                            </div>
                                            
                                        </div>
                                        <div>
                                            <div class="input-group input-group-sm mb-3" style="display: @showNvarchar">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text" id="inputGroup-sizing-sm">Nvarchar Count</span>
                                                </div>
                                                <input type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" @bind="nvarcharChount">
                                            </div>
                                        </div>
                                        <button class="col-12 btn btn-success" @onclick="submiteditoradd">@submitlbl</button>
                                    </div>
                                                
            </div>

        </div>

        <div class="form-group row">
            <lable class="col-4 font-weight-bold">1. @showparameterclass.pr1n</lable>
            <lable class="col-4 font-weight-bold">2. @showparameterclass.pr2n</lable>
            <lable class="col-4 font-weight-bold">3. @showparameterclass.pr3n</lable>
            <lable class="col-4 font-weight-bold">4. @showparameterclass.pr4n</lable>
            <lable class="col-4 font-weight-bold">5. @showparameterclass.pr5n</lable>
            <lable class="col-4 font-weight-bold">6. @showparameterclass.pr6n</lable>
            <lable class="col-4 font-weight-bold">7. @showparameterclass.pr7n</lable>
            <lable class="col-4 font-weight-bold">8. @showparameterclass.pr8n</lable>
            <lable class="col-4 font-weight-bold">9. @showparameterclass.pr9n</lable>
            <lable class="col-4 font-weight-bold">10. @showparameterclass.pr10n</lable>
            <lable class="col-4 font-weight-bold">11.@showparameterclass.pr11n</lable>
            <lable class="col-4 font-weight-bold">12. @showparameterclass.pr12n</lable>
            <lable class="col-4 font-weight-bold">13. @showparameterclass.pr13n</lable>
            <lable class="col-4 font-weight-bold">14. @showparameterclass.pr14n</lable>
            <lable class="col-4 font-weight-bold">15. @showparameterclass.pr15n</lable>
            <lable class="col-4 font-weight-bold">16. @showparameterclass.pr16n</lable>
            <lable class="col-4 font-weight-bold">17. @showparameterclass.pr17n</lable>
            <lable class="col-4 font-weight-bold">18. @showparameterclass.pr18n</lable>
            <lable class="col-4 font-weight-bold">19. @showparameterclass.pr19n</lable>
            <lable class="col-4 font-weight-bold">20. @showparameterclass.pr20n</lable>
        </div>
       
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>       
      </div>
    </div>
  </div>
</div>


                <!-- end container-fluid -->
                <!-- Footer Start -->
                <footer class="footer">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                2021 &copy; shikkhanobish
                            </div>
                        </div>
                    </div>
                </footer>
                <!-- end Footer -->
            </div>
            <!-- end content -->

        </div>

        <!-- END content-page -->

    </div>

    <!-- END wrapper -->
    <!-- Vendor js -->
</body>
</html>


@code{

    public string userName { get; set; }
    public string pass { get; set; }
    string clsName = "";
    string totalChapQues;
    string limit1;
    string showdeletepara;
    string limit;
    string showClasName;
    string submitlbl;
    string showeditoraddpara;
    string showcodedisplay;
    ClassGen showparameterclass = new ClassGen();
    int selecteOPID;
    string saveservertxt;
    string intbtnColor { get; set; }
    string floatbtnColor { get; set; }
    string stringbtnColor { get; set; }
    string doublebtnColor { get; set; }
    string Link;
    string singleTableItemTextBoxExist;
    string previewCode;
    int SelectedChapterID;
    string BtnString;
    string addName;
    string showeditinput;
    string errorTxt;
    string addNumber;
    string showNvarchar { get; set; }
    string showLoading;
    string selectedChapterName;
    string showLoadingRemoveTask;
    string selectedMCQList;
    string singleTableItemTextBox;
    List<string> classList = new List<string>();
    List<string> ShowParameter = new List<string>();
    List<string> operatorListSelect = new List<string>();
    List<string> subjectList = new List<string>();
    List<string> chapterList = new List<string>();
    List<dataentryOperatorTask> showInfo = new List<dataentryOperatorTask>();
    List<dataentryOperatorTask> LiveshowInfo = new List<dataentryOperatorTask>();
    List<Chapter> allc = new List<Chapter>();
    List<Subject> allsub = new List<Subject>();
    int thisParameter { get; set; }
    List<Teachers> teacherList = new List<Teachers>();
    List<shiEmployee> shiEMList = new List<shiEmployee>();
    List<dataentryOperatorTask> operatorList = new List<dataentryOperatorTask>();
    List<int> numList = new List<int>();
    string inactiveColor = "btn-dark";
    string nvarcharChount { get; set; }
    string activeColor = "btn-success";
    ClassGen thisselctedClassGen { get; set; }
    string cpMakecls;
    string cpMakesql;
    string cpgetPro;
    string cpgetPrpwid;
    string cpgetapi;
    string cpgetapiwid;
    string cpsetPro;
    string showMakeClassCode;
    string showMakeSQLCode;
    string showGetApiCode;
    string showGetWIDApiCode;
    string showSetApiCode;
    string showGetProCode;
    string showGetWithIDProCode;
    string showSetProCode;
    string showreviewcodedisplay;
    public async Task Logout()
    {
        // await oLocalStore.ClearAsync();
        string redirectURL = "/";
        //nvi.NavigateTo(redirectURL);
    }
    public async Task RemoveClass(int id){
        var res1 = await "https://api.shikkhanobish.com/api/ApiMaker/deleteClass".PostUrlEncodedAsync(new
        {          
            @ID = id
        })   .ReceiveJson<Response>();
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
    }
    public void copymakeClassCode(int i)
    {
        if(i == 1)
        {
            string thiscopytext = showMakeClassCode;
            thiscopytext = thiscopytext.Replace("<br/>","\n");
            JS.InvokeVoidAsync("navigator.clipboard.writeText", thiscopytext);
        }
        if(i == 2)
        {
            string thiscopytext = showMakeSQLCode;
            thiscopytext = thiscopytext.Replace("<br/>","\n");
            JS.InvokeVoidAsync("navigator.clipboard.writeText", thiscopytext);
        }
        if(i == 3)
        {
            string thiscopytext = showGetApiCode;
            thiscopytext = thiscopytext.Replace("<br/>","\n");
            thiscopytext = thiscopytext.Replace("&lt;","<");
            thiscopytext = thiscopytext.Replace("&gt;",">");
            JS.InvokeVoidAsync("navigator.clipboard.writeText", thiscopytext);
        }
        if(i == 4)
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", showGetWIDApiCode);
        }
        if(i == 5)
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", showSetApiCode);
        }
        if(i == 6)
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", showGetProCode);
        }
        if(i == 7)
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", showGetWithIDProCode);
        }
        if(i == 8)
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", showSetProCode);
        }

        
    }
    public async Task ShowParameterList(ClassGen thisclasgen)
    {
        for(int i =0; i < allClassGen.Count; i++)
        {
            if(thisclasgen.ID == allClassGen[i].ID)
            {
                thisclasgen =  new ClassGen();
                thisclasgen = allClassGen[i];
            }
        }
        ClassGen showTable = new ClassGen();
        showTable = thisclasgen;
        thisselctedClassGen = new ClassGen();
        thisselctedClassGen = showTable;
        showTable.pr1n = (showTable.pr1n == "N/A") ? "" : showTable.pr1n;
        showTable.pr2n = (showTable.pr2n == "N/A") ? "" : showTable.pr2n;
        showTable.pr3n = (showTable.pr3n == "N/A") ? "" : showTable.pr3n;
        showTable.pr4n = (showTable.pr4n == "N/A") ? "" : showTable.pr4n;
        showTable.pr5n = (showTable.pr5n == "N/A") ? "" : showTable.pr5n;
        showTable.pr6n = (showTable.pr6n == "N/A") ? "" : showTable.pr6n;
        showTable.pr7n = (showTable.pr7n == "N/A") ? "" : showTable.pr7n;
        showTable.pr8n = (showTable.pr8n == "N/A") ? "" : showTable.pr8n;
        showTable.pr9n = (showTable.pr9n == "N/A") ? "" : showTable.pr9n;
        showTable.pr10n = (showTable.pr10n == "N/A") ? "" : showTable.pr10n;
        showTable.pr11n = (showTable.pr11n == "N/A") ? "" : showTable.pr11n;
        showTable.pr12n = (showTable.pr12n == "N/A") ? "" : showTable.pr12n;
        showTable.pr13n = (showTable.pr13n == "N/A") ? "" : showTable.pr13n;
        showTable.pr14n = (showTable.pr14n == "N/A") ? "" : showTable.pr14n;
        showTable.pr15n = (showTable.pr15n == "N/A") ? "" : showTable.pr15n;
        showTable.pr16n = (showTable.pr16n == "N/A") ? "" : showTable.pr16n;
        showTable.pr17n = (showTable.pr17n == "N/A") ? "" : showTable.pr17n;
        showTable.pr18n = (showTable.pr18n == "N/A") ? "" : showTable.pr18n;
        showTable.pr19n = (showTable.pr19n == "N/A") ? "" : showTable.pr19n;
        showTable.pr20n = (showTable.pr20n == "N/A") ? "" : showTable.pr20n;

        showTable.pr1n = cleanpara(showTable.pr1n,false);
        showTable.pr2n = cleanpara(showTable.pr2n,false);
        showTable.pr3n = cleanpara(showTable.pr3n,false);
        showTable.pr4n = cleanpara(showTable.pr4n,false);
        showTable.pr5n = cleanpara(showTable.pr5n,false);
        showTable.pr6n = cleanpara(showTable.pr6n,false);
        showTable.pr7n = cleanpara(showTable.pr7n,false);
        showTable.pr8n = cleanpara(showTable.pr8n,false);
        showTable.pr9n = cleanpara(showTable.pr9n,false);
        showTable.pr10n = cleanpara(showTable.pr10n,false);
        showTable.pr11n = cleanpara(showTable.pr11n,false);
        showTable.pr12n = cleanpara(showTable.pr12n,false);
        showTable.pr13n = cleanpara(showTable.pr13n,false);
        showTable.pr14n = cleanpara(showTable.pr14n,false);
        showTable.pr15n = cleanpara(showTable.pr15n,false);
        showTable.pr16n = cleanpara(showTable.pr16n,false);
        showTable.pr17n = cleanpara(showTable.pr17n,false);
        showTable.pr18n = cleanpara(showTable.pr18n,false);
        showTable.pr19n = cleanpara(showTable.pr19n,false);
        showTable.pr20n = cleanpara(showTable.pr20n,false);
        showparameterclass = new ClassGen();
        showparameterclass = showTable;
        singleTableItemTextBox = "";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
        submitlbl = "Submit";
        showNvarchar = "None";
        singleTableItemTextBox = "";
        singleTableItemTextBoxExist = "";
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        StateHasChanged();
    }
    public string cleanpara(string thispara, bool isTotalClean){
        string cleaned = "";
        for(int i = 0; i< thispara.Length; i++){
            if(thispara[i] != ' ')
            {
                cleaned += thispara[i];
            }
            else{
                if (!isTotalClean)
                {
                    if(thispara[i+1] == '1')
                    {
                        cleaned += " (int)";
                    }
                    if(thispara[i+1] == '2')
                    {
                        cleaned += " (string)";
                    }
                    if(thispara[i+1] == '3')
                    {
                        cleaned += " (double)";
                    }
                    if(thispara[i+1] == '4')
                    {
                        cleaned += " (float)";
                    }
                }

                break;
            } 
        }
        return cleaned;
    }
    protected override async Task OnInitializedAsync()
    {
        showreviewcodedisplay = "None";
        submitlbl = "Submit";
        saveservertxt = "Save In Server";
        showcodedisplay = "None";
        showeditinput = "None";
        showdeletepara = "None";
        showeditoraddpara = "None";
        showClasName = "Student";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
        showNvarchar = "None";
        showLoadingRemoveTask = "None";
        showLoading = "None";
        BtnString = "Assign Task";
        userName = StaticClassToPassData.thisAdmin.name;
        pass = StaticClassToPassData.thisAdmin.passWord;
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();



    }

    public void deleteclass()
    {

    }
    public void submiteditoradd(){
        if(showeditinput == "Block")
        {
            eidtparameterinTable();
        }
        else
        {
            AddparameterInTable();
        }
    }

    public async Task eidtparameterinTable()
    {
        submitlbl = "Submitting...";
        string selectedParaName = "";
        for(int i = 0; i < allClassGen.Count; i++)
        {
            if(thisselctedClassGen.ID == allClassGen[i].ID){
                thisselctedClassGen = new ClassGen();
                thisselctedClassGen = allClassGen[i];
            }
        }
        if(thisParameter == 0)
        {
            singleTableItemTextBox = "N/A";
        }
        else if(thisParameter == 2)
        {
            singleTableItemTextBox += " "+thisParameter + " " + nvarcharChount;
        }
        else
        {
            singleTableItemTextBox += " "+thisParameter;
        }

        if(singleTableItemTextBoxExist == "1")
        {
            thisselctedClassGen.pr1n = singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "2")
        {
            thisselctedClassGen.pr2n = singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "3")
        {
            thisselctedClassGen.pr3n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "4")
        {
            thisselctedClassGen.pr4n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "5")
        {
            thisselctedClassGen.pr5n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "6")
        {
            thisselctedClassGen.pr6n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "7")
        {
            thisselctedClassGen.pr7n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "8")
        {
            thisselctedClassGen.pr8n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "9")
        {
            thisselctedClassGen.pr9n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "10")
        {
            thisselctedClassGen.pr10n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "11")
        {
            thisselctedClassGen.pr11n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "12")
        {
            thisselctedClassGen.pr12n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "13")
        {
            thisselctedClassGen.pr13n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "14")
        {
            thisselctedClassGen.pr14n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "15")
        {
            thisselctedClassGen.pr15n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "16")
        {
            thisselctedClassGen.pr16n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "17")
        {
            thisselctedClassGen.pr17n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "18")
        {
            thisselctedClassGen.pr18n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "19")
        {
            thisselctedClassGen.pr19n= singleTableItemTextBox;
        }
        if(singleTableItemTextBoxExist == "20")
        {
            thisselctedClassGen.pr20n= singleTableItemTextBox;
        }
        var res1 = await "https://api.shikkhanobish.com/api/ApiMaker/setAPiMakerInSingleColumn".PostUrlEncodedAsync(new
        {
            @PrNumber = thisselctedClassGen.PrNumber,
            @tableName = thisselctedClassGen.tableName,
            @pr1n = thisselctedClassGen.pr1n,
            @pr2n = thisselctedClassGen.pr2n,
            @pr3n = thisselctedClassGen.pr3n,
            @pr4n = thisselctedClassGen.pr4n,
            @pr5n = thisselctedClassGen.pr5n,
            @pr6n = thisselctedClassGen.pr6n,
            @pr7n = thisselctedClassGen.pr7n,
            @pr8n = thisselctedClassGen.pr8n,
            @pr9n = thisselctedClassGen.pr9n,
            @pr10n = thisselctedClassGen.pr10n,
            @pr11n = thisselctedClassGen.pr11n,
            @pr12n = thisselctedClassGen.pr12n,
            @pr13n = thisselctedClassGen.pr13n,
            @pr14n = thisselctedClassGen.pr14n,
            @pr15n = thisselctedClassGen.pr15n,
            @pr16n = thisselctedClassGen.pr16n,
            @pr17n = thisselctedClassGen.pr17n,
            @pr18n = thisselctedClassGen.pr18n,
            @pr19n = thisselctedClassGen.pr19n,
            @pr20n = thisselctedClassGen.pr20n,
            @ID = thisselctedClassGen.ID
        })
   .ReceiveJson<Response>();
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        await ShowParameterList(thisselctedClassGen);
        singleTableItemTextBox = "";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
        submitlbl = "Submit";
        showNvarchar = "None";
        singleTableItemTextBox = "";
        singleTableItemTextBoxExist = "";
        StateHasChanged();
    }
    public async Task AddparameterInTable()
    {
        submitlbl = "Submitting...";


        string selectedParaName = "";

        for(int i = 0; i < allClassGen.Count; i++)
        {
            if(thisselctedClassGen.ID == allClassGen[i].ID){
                thisselctedClassGen = new ClassGen();
                thisselctedClassGen = allClassGen[i];
            }
        }
        if(thisParameter == 2)
        {
            singleTableItemTextBox += " "+thisParameter + " " + nvarcharChount;
        }
        else
        {
            singleTableItemTextBox += " "+thisParameter;
        }
        if( thisselctedClassGen.PrNumber== 0)
        {
            thisselctedClassGen.pr1n = singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 1)
        {
            thisselctedClassGen.pr2n = singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 2)
        {
            thisselctedClassGen.pr3n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 3)
        {
            thisselctedClassGen.pr4n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 4)
        {
            thisselctedClassGen.pr5n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 5)
        {
            thisselctedClassGen.pr6n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 6)
        {
            thisselctedClassGen.pr7n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 7)
        {
            thisselctedClassGen.pr8n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 8)
        {
            thisselctedClassGen.pr9n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 9)
        {
            thisselctedClassGen.pr10n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 10)
        {
            thisselctedClassGen.pr11n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 11)
        {
            thisselctedClassGen.pr12n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 12)
        {
            thisselctedClassGen.pr13n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 13)
        {
            thisselctedClassGen.pr14n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 14)
        {
            thisselctedClassGen.pr15n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 15)
        {
            thisselctedClassGen.pr16n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 16)
        {
            thisselctedClassGen.pr17n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 17)
        {
            thisselctedClassGen.pr18n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 18)
        {
            thisselctedClassGen.pr19n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 19)
        {
            thisselctedClassGen.pr20n= singleTableItemTextBox;
        }
        if(thisselctedClassGen.PrNumber == 20)
        {
            return;
        }
        thisselctedClassGen.PrNumber += 1;
        var res1 = await "https://api.shikkhanobish.com/api/ApiMaker/setAPiMakerInSingleColumn".PostUrlEncodedAsync(new
        {
            @PrNumber = thisselctedClassGen.PrNumber,
            @tableName = thisselctedClassGen.tableName,
            @pr1n = thisselctedClassGen.pr1n,
            @pr2n = thisselctedClassGen.pr2n,
            @pr3n = thisselctedClassGen.pr3n,
            @pr4n = thisselctedClassGen.pr4n,
            @pr5n = thisselctedClassGen.pr5n,
            @pr6n = thisselctedClassGen.pr6n,
            @pr7n = thisselctedClassGen.pr7n,
            @pr8n = thisselctedClassGen.pr8n,
            @pr9n = thisselctedClassGen.pr9n,
            @pr10n = thisselctedClassGen.pr10n,
            @pr11n = thisselctedClassGen.pr11n,
            @pr12n = thisselctedClassGen.pr12n,
            @pr13n = thisselctedClassGen.pr13n,
            @pr14n = thisselctedClassGen.pr14n,
            @pr15n = thisselctedClassGen.pr15n,
            @pr16n = thisselctedClassGen.pr16n,
            @pr17n = thisselctedClassGen.pr17n,
            @pr18n = thisselctedClassGen.pr18n,
            @pr19n = thisselctedClassGen.pr19n,
            @pr20n = thisselctedClassGen.pr20n,
            @ID = thisselctedClassGen.ID
        })   .ReceiveJson<Response>();



        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        await ShowParameterList(thisselctedClassGen);        
        singleTableItemTextBox = "";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
        submitlbl = "Submit";
        showNvarchar = "None";
        StateHasChanged();
    }
    List<string> tblItemList = new List<string>();
    List<ClassGen> allClassGen = new List<ClassGen>();
    List<ClassGen> allClassForCal = new List<ClassGen>();
    public void RemoveParameter(string thispara)
    {
        for (int i = 0; i < ShowParameter.Count; i++)
        {
            if (ShowParameter[i] == thispara)
            {
                tblItemList.RemoveAt(i);
                ShowParameter.RemoveAt(i);
            }
        }
    }
    public void addpapa ()
    {
        showdeletepara = "None";
        showeditoraddpara = "Block";
        showeditinput = "None";
    }
    public void editPara ()
    {
        showdeletepara = "None";
        showeditoraddpara = "Block";
        showeditinput = "Block";
    }
    public void deletePara ()
    {
        showdeletepara = "BLock";
        showeditoraddpara = "None";
        showeditinput = "None";

    }
    public async Task GetAllClass()
    {
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        allClassForCal = allClassGen;
        //clsList.ItemsSource = allClass;
    }

    private void clearnItemList_Click()
    {
        //TableElementList.ItemsSource = null;
        tblItemList.Clear();
    }
    public async Task refresh()
    {
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        allClassForCal = allClassGen;
        // clsList.ItemsSource = null;
        // clsList.ItemsSource = allClass;
        //rfslbl.Content = "";
    }
    public void makeThisparameterInt()
    {
        thisParameter = 1;
        showNvarchar = "None";
        intbtnColor = activeColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
    }
    public void makeThisparameterString()
    {
        thisParameter = 2;
        showNvarchar = "Block";
        intbtnColor = inactiveColor;
        stringbtnColor = activeColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = inactiveColor;
    }
    public void makeThisparameterDouble()
    {
        thisParameter = 3;
        showNvarchar = "None";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = inactiveColor;
        doublebtnColor = activeColor;
    }
    public void makeThisparameterFloat()
    {
        thisParameter = 4;
        showNvarchar = "None";
        intbtnColor = inactiveColor;
        stringbtnColor = inactiveColor;
        floatbtnColor = activeColor;
        doublebtnColor = inactiveColor;
    }
    private void AddTableItem_Click()
    {
        if (tblItemList.Count == 20 || thisParameter == 0 || clsName.Contains(" "))
        {
            errorTxt = "Select Parameter or Can't add more then 20 parameter or class name can't contain space";
            return;
        }
        else
        {
            string item = "";
            if (!singleTableItemTextBox.Contains(" "))
            {
                item = singleTableItemTextBox;
            }

            if (thisParameter == 1)
            {
                ShowParameter.Add(item + " int");
            }
            if (thisParameter == 2)
            {
                if (nvarcharChount == "" || nvarcharChount == null)
                {
                    return;
                }
                ShowParameter.Add(item + " string nvarchar(" + nvarcharChount + ")");
            }
            if (thisParameter == 3)
            {
                ShowParameter.Add(item + " double");
            }
            if (thisParameter == 4)
            {
                ShowParameter.Add(item + " float");
            }
            if(thisParameter == 2)
            {
                item += " " + thisParameter + " " + nvarcharChount;
            }
            else
            {
                item += " " + thisParameter;
            }

            thisParameter = 0;
            nvarcharChount = "";
            errorTxt = "";
            singleTableItemTextBox = "";
            showNvarchar = "None";
            tblItemList.Add(item);
            intbtnColor = inactiveColor;
            stringbtnColor = inactiveColor;
            floatbtnColor = inactiveColor;
            doublebtnColor = inactiveColor;
            //Show
            //TableElementList.ItemsSource = null;
            //TableElementList.ItemsSource = tblItemList;
        }

    }


    public async Task SetClass()
    {
        saveservertxt = "Saving...";
        List<string> list = ConvertToServerList();
        Random rd = new Random();
        var res1 = await "https://api.shikkhanobish.com/api/ApiMaker/setAPiMaker".PostUrlEncodedAsync(new
        {
            @PrNumber = list[0],
            @tableName = list[1],
            @pr1n = list[2],
            @pr2n = list[3],
            @pr3n = list[4],
            @pr4n = list[5],
            @pr5n = list[6],
            @pr6n = list[7],
            @pr7n = list[8],
            @pr8n = list[9],
            @pr9n = list[10],
            @pr10n = list[11],
            @pr11n = list[12],
            @pr12n = list[13],
            @pr13n = list[14],
            @pr14n = list[15],
            @pr15n = list[16],
            @pr16n = list[17],
            @pr17n = list[18],
            @pr18n = list[19],
            @pr19n = list[20],
            @pr20n = list[21],
            @ID = rd.Next(100000,999999)
        })
   .ReceiveJson<Response>();
        allClassGen = await "https://api.shikkhanobish.com/api/ApiMaker/getAPiMaker".GetJsonAsync<List<ClassGen>>();
        ShowParameter = new List<string>();
        clsName = "";
        saveservertxt = "Save In Server";
        StateHasChanged();
    }

    private void Button_Click()
    {
        SetClass();
        //rfslbl.Content = "Refresh Now";
    }

    public List<string> ConvertToServerList()
    {
        List<string> content = new List<string>();
        content.Add("" + tblItemList.Count);
        content.Add(clsName);
        for (int i = 0; i < tblItemList.Count; i++)
        {
            content.Add(tblItemList[i]);
        }
        for (int i = tblItemList.Count; i < 20; i++)
        {
            content.Add("N/A");
        }
        if (allClassForCal.Count != 0)
        {
            int max = allClassForCal[0].ID;
            for (int i = 0; i < allClassForCal.Count; i++)
            {
                if (max < allClassForCal[i].ID)
                {
                    max = allClassForCal[i].ID;
                }
            }
            content.Add("" + (max + 1));
        }
        else
        {
            content.Add("" + 0);
        }
        return content;
    }
    public ClassGen converThistoClasGen()
    {
        ClassGen newmade = new ClassGen();
        List<string> list = ConvertToServerList();

        newmade.PrNumber = int.Parse(list[0]);
        newmade.tableName = list[1];
        newmade.pr1n = list[2];
        newmade.pr2n = list[3];
        newmade.pr3n = list[4];
        newmade.pr4n = list[5];
        newmade.pr5n = list[6];
        newmade.pr6n = list[7];
        newmade.pr7n = list[8];
        newmade.pr8n = list[9];
        newmade.pr9n = list[10];
        newmade.pr10n = list[11];
        newmade.pr11n = list[12];
        newmade.pr12n = list[13];
        newmade.pr13n = list[14];
        newmade.pr14n = list[15];
        newmade.pr15n = list[16];
        newmade.pr16n = list[17];
        newmade.pr17n = list[18];
        newmade.pr18n = list[19];
        newmade.pr19n = list[20];
        newmade.pr20n = list[21];
        newmade.ID = int.Parse(list[22]);

        return newmade;
    }
    private void Button_Click_1()
    {
        refresh();
    }
    ClassGen thissl = new ClassGen(); 
    private void genClassSelectedTable(ChangeEventArgs devent)
    {

        string data = devent.Value.ToString();
        for(int i = 0; i < allClassGen.Count; i++){
            if(data == allClassGen[i].tableName){

                thissl = allClassGen[i];

                break;
            }

        }
        showreviewcodedisplay = "Block";
        makeClass(thissl);
        makeSql(thissl);
        makeGetApi(thissl);
        makeGetApiWithID(thissl);
        MakeSetApi(thissl);
        makeGetProcedure(thissl);
        makeGetProcedureWithID(thissl);
        makeSetProcedure(thissl);


    }

    public string determinevt(string para)
    {
        string vt = "";
        for(int i = 0; i < para.Length; i++){
            if(para[i] == ' ')
            {
                if(para[i+1] == '1')
                {
                    vt = "int";
                }
                if(para[i+1] == '2')
                {
                    vt = "string";
                }
                if(para[i+1] == '3')
                {
                    vt = "double";
                }
                if(para[i+1] == '4')
                {
                    vt = "float";
                }
                break;
            }
        }

        return vt;

    }
    public string makeClass(ClassGen thisclass)
    {

        showcodedisplay = "Block";
        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4','5', '6', '7', '8','9' ,'0'};
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);
        string classCode = "";
        for (int i = 0; i < thisClassParameter.Count; i++)
        {
            if(thisClassParameter[i] != "N/A")
            {
                classCode += "public " + determinevt(thisClassParameter[i]) +" "+ thisClassParameter[i].Trim(charsToTrim) + " { get ; set ;} <br/>";
            }


        }

        classCode += "public string Response  { get ; set ;} <br/>";

        showMakeClassCode = "";
        showMakeClassCode = classCode;
        return classCode;
    }
    public string determinevtsql(string para)
    {
        string vt = "";
        for(int i = 0; i < para.Length; i++){
            if(para[i] == ' ')
            {
                if(para[i+1] == '1')
                {
                    vt = "int";
                }
                if(para[i+1] == '2')
                {
                    vt = "nvarchar(";
                    for(int j = i+2; j < para.Length; j++)
                    {
                        vt += para[j];
                    }
                    vt += ")";
                }
                if(para[i+1] == '3')
                {
                    vt = "float";
                }
                if(para[i+1] == '4')
                {
                    vt = "float";
                }
                break;
            }
        }

        return vt;

    }
    public string makeSql(ClassGen thisclass)
    {
        showcodedisplay = "Block";
        thisclass = thissl;
        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4','5', '6', '7', '8','9' ,'0'};
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);

        string classCode = "create table " + thisclass.tableName + "(<br/>";
        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (i == thisclass.PrNumber - 1)
            {
                classCode += thisClassParameter[i].Trim(charsToTrim) + " "+determinevtsql(thisClassParameter[i]) + "<br/>";
            }
            else
            {
                classCode += thisClassParameter[i].Trim(charsToTrim) + " "+determinevtsql(thisClassParameter[i]) + ",<br/>";
            }

        }
        classCode += ")";
        showMakeSQLCode = "";
        showMakeSQLCode = classCode;
        return classCode;
    }



    public string makeGetProcedure(ClassGen thisClsGen)
    {
        showcodedisplay = "Block";
        string getProCode = "create procedure get" + thisClsGen.tableName + "<br/> as begin <br/> Select * from " + thisClsGen.tableName + "<br/> end";

        showGetProCode = "";
        showGetProCode = getProCode;
        return getProCode;


    }

    public string makeGetProcedureWithID(ClassGen thisclass)
    {

        showcodedisplay = "Block";
        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4' };
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);
        string proCode = "";
        proCode = "create procedure get" + thisclass.tableName + "WithID<br/>";
        proCode += " @" + thisClassParameter[0].Trim(charsToTrim) + " int" + "<br/>";

        proCode += "as begin <br/> Select ( ";

        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (i == thisclass.PrNumber - 1)
            {
                proCode += thisClassParameter[i].Trim(charsToTrim);
            }
            else
            {
                proCode += thisClassParameter[i].Trim(charsToTrim) + ", ";
            }

        }
        proCode += ") from " + thisclass.tableName + " <br/> Where " + thisClassParameter[0].Trim(charsToTrim) + " = @" + thisClassParameter[0].Trim(charsToTrim) + "  <br/>end";

        showGetWithIDProCode = "";
        showGetWithIDProCode = proCode;

        return proCode;

    }

    public string makeGetApi(ClassGen thisclass)
    {

        showcodedisplay = "Block";
        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4' };
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);

        string apiCode = "";
        apiCode = "[System.Web.Http.AcceptVerbs(\"GET\", \"POST\")]<br/>public List&lt;" + thisclass.tableName + "> get" + thisclass.tableName + "()<br/>{<br/>List&lt;" + thisclass.tableName + "&gt; objRList" + " = new List&lt;" + thisclass.tableName + "&gt;();";

        apiCode += "<br/>try <br/>" +
                "{<br/>" +
                "Connection();<br/>" +
                "SqlCommand cmd = new SqlCommand(\"" + "get" + thisclass.tableName + "\", conn);<br/>" + "cmd.CommandType = System.Data.CommandType.StoredProcedure;<br/>";
        apiCode += "conn.Open();<br/>" +
                   "SqlDataReader reader = cmd.ExecuteReader();<br/>";
        apiCode += "while (reader.Read())<br/>" +
        "{<br/>";
        apiCode += thisclass.tableName + " objAdd" + " = new " + thisclass.tableName + "();<br/>";
        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '1')
            {
                apiCode += "objAdd." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objAdd." + thisClassParameter[i].Trim(charsToTrim) + " = reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"].ToString(); <br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objAdd." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objAdd." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
        }
        apiCode += "objRList.Add(objAdd);<br/>}<br/>" +
                "conn.Close();<br/>" +
                "}<br/>" +
                "catch (Exception ex)<br/>" +
                "{<br/>" +
                thisclass.tableName + " objAdd" + " = new " + thisclass.tableName + "();<br/>" +
                "objAdd.Response = ex.Message;<br/>" +
                "objRList.Add(objAdd);<br/>" +
                "}<br/>" +
                "return objRList;<br/>" +
                "}<br/>";

        showGetApiCode = "";
        showGetApiCode = apiCode;
        return apiCode;
    }

    public string makeGetApiWithID(ClassGen thisclass)
    {
        showcodedisplay = "Block";

        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4' };
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);

        string apiCode = "";
        apiCode = "[AcceptVerbs(\"GET\", \"POST\")]<br/>public " + thisclass.tableName + " get" + thisclass.tableName + "WithID(" + thisclass.tableName + " obj)<br/>{<br/>" + thisclass.tableName + " objR" + " = new " + thisclass.tableName + "();";

        apiCode += "<br/>try <br/>" +
                "{<br/>" +
                "Connection();<br/>" +
                "SqlCommand cmd = new SqlCommand(\"" + "get" + thisclass.tableName + "WithID\", conn);<br/>" + "cmd.CommandType = System.Data.CommandType.StoredProcedure;<br/>" +
                "cmd.Parameters.AddWithValue(\"@" + thisClassParameter[0].Trim(charsToTrim) + "\", obj." + thisClassParameter[0].Trim(charsToTrim) + ");<br/>";
        apiCode += "conn.Open();<br/>" +
                   "SqlDataReader reader = cmd.ExecuteReader();<br/>";
        apiCode += "while (reader.Read())<br/>" +
        "{<br/>";
        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '1')
            {
                apiCode += "objR." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objR." + thisClassParameter[i].Trim(charsToTrim) + " = reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"].ToString(); <br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objR." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                apiCode += "objR." + thisClassParameter[i].Trim(charsToTrim) + " = Convert.ToInt32(reader[\"" + thisClassParameter[i].Trim(charsToTrim) + "\"]);<br/>";
            }
        }
        apiCode += "<br/>}<br/>" +
                "conn.Close();<br/>" +
                "}<br/>" +
                "catch (Exception ex)<br/>" +
                "{<br/>" +
                thisclass.tableName + " objR" + " = new " + thisclass.tableName + "();<br/>" +
                "objR.Response = ex.Message;<br/>" +
                "}<br/>" +
                "retrun objR;<br/>" +
                "}<br/>";

        showGetWIDApiCode = "";
        showGetWIDApiCode = apiCode;
        return apiCode;
    }



    public string makeSetProcedure(ClassGen thisclass)
    {
        showcodedisplay = "Block";

        List<string> thisClassParameter = new List<string>();
        char[] charsToTrim = { ' ', '1', '2', '3', '4' };
        thisClassParameter.Add(thisclass.pr1n);
        thisClassParameter.Add(thisclass.pr2n);
        thisClassParameter.Add(thisclass.pr3n);
        thisClassParameter.Add(thisclass.pr4n);
        thisClassParameter.Add(thisclass.pr5n);
        thisClassParameter.Add(thisclass.pr6n);
        thisClassParameter.Add(thisclass.pr7n);
        thisClassParameter.Add(thisclass.pr8n);
        thisClassParameter.Add(thisclass.pr9n);
        thisClassParameter.Add(thisclass.pr10n);
        thisClassParameter.Add(thisclass.pr11n);
        thisClassParameter.Add(thisclass.pr12n);
        thisClassParameter.Add(thisclass.pr13n);
        thisClassParameter.Add(thisclass.pr14n);
        thisClassParameter.Add(thisclass.pr15n);
        thisClassParameter.Add(thisclass.pr16n);
        thisClassParameter.Add(thisclass.pr17n);
        thisClassParameter.Add(thisclass.pr18n);
        thisClassParameter.Add(thisclass.pr19n);
        thisClassParameter.Add(thisclass.pr20n);
        string getProCode = "create procedure set" + thisclass.tableName + "<br/>";

        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '1')
            {
                if (i == thisclass.PrNumber - 1)
                {
                    getProCode += "@" + thisClassParameter[i].Trim(charsToTrim) + " int" + "<br/>";
                }
                else
                {
                    getProCode += "@" + thisClassParameter[i].Trim(charsToTrim) + " int" + ",<br/>";
                }
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '2')
            {
                if (i == thisclass.PrNumber - 1)
                {
                    getProCode += "@" + thisClassParameter[i].Trim(charsToTrim) + " nvarchar(50)" + "<br/>";
                }
                else
                {
                    getProCode += "@" + thisClassParameter[i].Trim(charsToTrim) + " nvarchar(50)" + ",<br/>";
                }
            }
            else if (thisClassParameter[i][thisClassParameter[i].Length - 1] == '3' || thisClassParameter[i][thisClassParameter[i].Length - 1] == '4')
            {
                if (i == thisclass.PrNumber - 1)
                {
                    getProCode += "@" + thisClassParameter[i] + " float" + "<br/>";
                }
                else
                {
                    getProCode += "@" + thisClassParameter[i] + " float" + ",<br/>";
                }
            }
        }
        getProCode += "as begin <br/> Insert Into " + thisclass.tableName + "(";
        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (i == thisclass.PrNumber - 1)
            {
                getProCode += thisClassParameter[i].Trim(charsToTrim);
            }
            else
            {
                getProCode += thisClassParameter[i].Trim(charsToTrim) + ", ";
            }
        }
        getProCode += ")<br/> values (";
        for (int i = 0; i < thisclass.PrNumber; i++)
        {
            if (i == thisclass.PrNumber - 1)
            {
                getProCode += "@" + thisClassParameter[i].Trim(charsToTrim);
            }
            else
            {
                getProCode += "@" + thisClassParameter[i].Trim(charsToTrim) + ", ";
            }
        }
        getProCode += ")<br/>end;";
        showSetProCode = "";
        showSetProCode = getProCode;
        return getProCode;
    }

    public void MakeSetApi(ClassGen thisClass)
    {
        showSetApiCode = "Yet To Done";
    }


}


















