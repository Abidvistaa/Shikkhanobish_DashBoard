@using Flurl.Http;
@using ShikkhanobishBlazor.Models
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@page "/RndNumGenerator"



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">

</head>

<body>
    
    <!-- Begin page -->
    <div id="wrapper" style="background-color: #F7F7F7; ">
        <!-- LOGO -->

        <div class="logo-box mt-2 m-0 ml-0">
            <a href="Count" class="">

                <img src="/images/snImg.jpg" style="display: block; margin-left: auto; margin-right: auto; width: 50px;height:50px;">

            </a>
        </div>
        <!-- Topbar Start -->
        <div class="navbar-custom">
            <ul class="list-unstyled topnav-menu float-right mb-0">
                <li class="dropdown notification-list">
                    <a class="nav-link dropdown-toggle nav-user mr-0" data-toggle="dropdown" href="#" role="button" aria-haspopup="false" aria-expanded="false">
                        <img src="/images/images.png" alt="user-image" class="rounded-circle" />
                        <span class="pro-user-name ml-1"> <i class="mdi mdi-chevron-down"></i> @userName</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right profile-dropdown">
                        <!-- item-->
                        <a href="javascript:void(0);" class="dropdown-item notify-item">
                            <i class="mdi mdi-logout-variant"></i>
                            <span @onclick="Logout">Logout</span>
                        </a>
                    </div>
                </li>
            </ul>

            <ul class="list-unstyled topnav-menu topnav-menu-left m-0">
                <li>
                    <button class="button-menu-mobile">
                        <i class="mdi mdi-menu"></i>
                    </button>
                </li>
            </ul>
        </div>
        <!-- end Topbar -->
        <!-- Left Sidebar Start  -->
        <div class="left-side-menu">
            <div class="user-box">
                <div class="float-left">
                    <img src="/images/images.png" alt="" class="avatar-md rounded-circle" />
                </div>
                <div class="user-info">
                    <a href="#">@userName</a>
                </div>
            </div>

            <!--- Sidemenu -->
            <div id="sidebar-menu">
                <ul class="metismenu" id="side-menu">
                    <li class="menu-title">Navigation</li>
                    <li>
                        <a href="https://dashboard.shikkhanobish.com/index.html">
                            <i class="fas fa-home"></i>
                            <span> Dashboard </span>
                        </a>
                    </li>
                    <li>
                        <a href="Count">
                            <i class="fas fa-calculator"></i>
                            <span> Count </span>
                        </a>
                    </li>
                    <li>
                        <a href="Questions">
                            <i class="far fa-question-circle"></i>
                            <span> Question </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherApproval">
                            <i class="fas fa-user-alt"></i>
                            <span> Teacher Qn. Approval </span>
                        </a>
                    </li>
                    <li>
                        <a href="ActiveTeacher">
                            <i class="fas fa-lightbulb"></i>
                            <span> Active Teacher </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherWithdraw">
                            <i class="fas fa-money-bill-wave-alt"></i>
                            <span> Teacher Withdraw </span>
                        </a>
                    </li>
                    <li>
                        <a href="SendMessage">
                            <i class="far fa-share-square"></i>
                            <span> Send Message </span>
                        </a>
                    </li>
                    <li>
                        <a href="RndNumGenerator">
                            <i class="fas fa-sort-numeric-up-alt"></i>
                            <span> RndNum Generator </span>
                        </a>
                    </li>

                </ul>

            </div>
            <!-- End Sidebar -->

            <div class="clearfix"></div>
        </div>
        <!-- Left Sidebar End -->
        <!-- ============================================================== -->
        <!-- Start Page Content here -->
        <!-- ============================================================== -->

        <div class="content-page">

            <div class="content">

                <div class="card">
                    <div class="card-body">
                        <label style="font-size:30px;" class="card-title">Add Neasdasdw Operator</label>
                        <div class="form-group row">
                            <div class="col-3">
                                <input class="form-control" placeholder="Name" @bind="addName" />
                            </div>
                            <div class="col-3">
                                <input class="form-control" placeholder="Phone Number" @bind="addNumber" />
                            </div>

                            <div class="col-3">
                                <button class="btn btn-outline-success" @onclick="addNewOperator">Add</button>
                            </div>


                        </div>
                    </div>


                </div>

                <div class="card">
                    <div class="card-body">
                        <label style="font-size:30px;" class="card-title">Operators</label>
                        <div class="table-responsive">
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col">Operator ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Phone Number</th>
                                        <th scope="col">Work Link</th>
                                        <th scope="col">Remove</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in shiEMList)
                                    {
                                        <tr>
                                            <th scope="row">@item.employeeID</th>
                                            <td>@item.name</td>
                                            <td>@item.phonenumber</td>
                                            <td>http://makequestion.shikkhanobish.com/@item.employeeID</td>
                                            <td>
                                                <button type="button" class="btn btn-danger btn-sm px-3" @onclick="@( async () => await RemoveOperator(item.employeeID))">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </td>
                                        </tr>



                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>

                </div>
                <!-- Start container-fluid -->
                <div class="container-fluid">
                    <div class="card ">
                        <div class="card-body">
                            <label style="font-size:30px;" class="card-title">Assign Task  </label>
                            <div class="form-group row">
                                <div class="col-4">
                                    <input class="form-control" placeholder="Enter Total Chapter Ques. Num" @bind="totalChapQues" />
                                </div>
                                <div class="col-4">
                                    <input class="form-control" placeholder="Enter Your Required Number" @onchange="@onChange" />
                                </div>

                                <div class="col-4">
                                    <input class="form-control" placeholder="Link" @bind="Link" />
                                </div>
                            </div>



                        </div>


                        <div class="card-body">
                            <table style="text-align:center; ">
                                <thead style="color: black; font-weight: bold;font-size:12px;">
                                    <tr>
                                        <th>Operator Name</th>
                                        <th>Class Name</th>
                                        <th>Subject Name</th>
                                        <th>Chapter Name</th>
                                        <th>List Of MCQ Number</th>

                                    </tr>
                                </thead>
                                <tbody style="font-size: 12px; ">
                                    <tr>
                                        <td>
                                            <select class="form-control btn btn-purple" id="class" @onchange="SelectedOperator">
                                                <option>Select Operator</option>
                                                @foreach (var item in operatorListSelect)
                                                {

                                                    <option value="@item">@item</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control btn btn-purple" id="class" @onchange="SelectedClass">
                                                <option>Select Class</option>
                                                @foreach (var item in classList)
                                                {

                                                    <option value="@item">@item</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control btn btn-purple" id="class" @onchange="SelectedSubject">
                                                <option>Select Subject</option>
                                                @foreach (var item in subjectList)
                                                {

                                                    <option value="@item">@item</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control btn btn-purple" id="class" @onchange="SelectedChapter">
                                                <option>Select Chapter</option>
                                                @foreach (var item in chapterList)
                                                {

                                                    <option value="@item">@item</option>
                                                }
                                            </select>
                                        </td>

                                        <td>
                                            <button class="btn btn-primary" type="button" @onclick="assignTask">

                                                @BtnString
                                            </button>
                                        </td>
                                    </tr>

                                </tbody>


                            </table>


                        </div>
                    </div>


                    <div class="card">
                        <div class="card-body">
                            <label style="color:blueviolet;font-size:30px;" class="card-title">Task  History</label>
                            <div class="table-responsive">
                                <table id="" class="table table-bordered" style="text-align:center; ">
                                    <thead style="color: black; font-weight: bold;font-size:10px;">
                                        <tr>
                                            <th>Operator ID</th>
                                            <th>Name</th>
                                            <th>Assigned Number</th>
                                            <th>Chapter ID</th>
                                            <th>Chapter Name</th>
                                            <th>Task Date</th>
                                            <th>Start Time (DD/MM/YYYY)</th>
                                            <th>End Time (DD/MM/YYYY)</th>
                                            <th>Submitted</th>
                                            <th>Remaining</th>
                                            <th>IS Task Submitted</th>
                                            <th>Status</th>
                                            <th>Delete Task</th>

                                        </tr>
                                    </thead>
                                    <tbody style="font-size: 10px; ">
                                        @foreach (var item in showInfo)
                                        {
                                            <tr>
                                                <td style="color: #2E2E2E">@item.userID</td>
                                                <td style="color: #2E2E2E">@item.userName</td>
                                                <td style="color: #2E2E2E">@item.MCQNumbers</td>
                                                <td style="color: #2E2E2E">@item.chapterID</td>
                                                <td style="color: #2E2E2E">@item.chapterName</td>
                                                <td style="color: #2E2E2E">@item.date</td>
                                                <td style="color: #2E2E2E">@item.startTime</td>
                                                <td style="color: #2E2E2E">@item.endTime</td>
                                                <td style="color: green" >@item.submitted</td>
                                                <td style="color: red">@item.reMain</td>
                                                <td style="color: @item.isTaskSubColor; font-weight: bold"> <i class="fas fa-times" style="display:@item.isTaskSubNootDone"></i>
                                                                                                            <i class="fas fa-check-double" style="display:@item.isTaskSubDone"></i>
                                                                                                            <i style="display:@item.isTaskSubPending">---</i></td>
                                                <td style="color: @item.statusColor; font-weight: bold">@item.status</td>
                                                <td>
                                                    <button type="button" class="btn btn-danger btn-sm px-3" @onclick="@( async () => await RemoveTask(item.taskID))">
                                                        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="display:@showLoadingRemoveTask"></span>
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </td>


                                            </tr>

                                        }

                                    </tbody>


                                </table>
                            </div>
                        </div>

                    </div>

                </div>

                <!-- end container-fluid -->
                <!-- Footer Start -->
                <footer class="footer">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                2021 &copy; shikkhanobish
                            </div>
                        </div>
                    </div>
                </footer>
                <!-- end Footer -->
            </div>
            <!-- end content -->

        </div>

        <!-- END content-page -->

    </div>
    <!-- END wrapper -->
    <!-- Vendor js -->
</body>
</html>


@code{

    public string userName { get; set; }
    public string pass { get; set; }

    string totalChapQues;
    string limit1;
    string limit;
    int selecteOPID;
    string Link;
    int SelectedChapterID;
    string BtnString;
    string addName;
    string addNumber;
    string showLoading;
    string selectedChapterName;
    string showLoadingRemoveTask;
    string selectedMCQList;
    List<string> classList = new List<string>();
    List<string> operatorListSelect = new List<string>();
    List<string> subjectList = new List<string>();
    List<string> chapterList = new List<string>();
    List<dataentryOperatorTask> showInfo = new List<dataentryOperatorTask>();
    List<dataentryOperatorTask> LiveshowInfo = new List<dataentryOperatorTask>();
    List<Chapter> allc = new List<Chapter>();
    List<Subject> allsub = new List<Subject>();
    List<ClassInfo> allClass = new List<ClassInfo>();
    List<Teachers> teacherList = new List<Teachers>();
    List<shiEmployee> shiEMList = new List<shiEmployee>();
    List<dataentryOperatorTask> operatorList = new List<dataentryOperatorTask>();
    List<int> numList = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        showLoadingRemoveTask = "None";
        showLoading = "None";
        BtnString = "Assign Task";
        userName = StaticClassToPassData.thisAdmin.name;
        pass = StaticClassToPassData.thisAdmin.passWord;

        await GetOperatorInfo();


    }
    public async Task addNewOperator()
    {

        Random rd = new Random();
        shiEmployee ne = new shiEmployee();
        ne.name = addName;
        ne.phonenumber = addNumber;
        ne.employeeID = rd.Next(100000,999999);
        ne.employeeType = 1;
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setshiEmployee".PostJsonAsync(new {
            name = ne.name,
            phonenumber = ne.phonenumber,
            employeeID = ne.employeeID,
            employeeType = ne.employeeType}).
            ReceiveJson<Response>();
        await getOpe();
    }
    public async Task RemoveOperator(int opID)
    {
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/deleteShiEmployee".PostJsonAsync(new
        {
            employeeID = opID
        }).
            ReceiveJson<Response>();
        await getOpe();
    }

    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        limit = (string)args.Value;
        CopyNum();
    }
    public void RefreshList()
    {
        totalChapQues = "";
        selecteOPID = 0;
        Link = "";
        limit = "";
        SelectedChapterID = 0;
        selectedChapterName = "";
        selectedMCQList = "";
        classList = new List<string>();
        operatorListSelect = new List<string>();
        subjectList = new List<string>();
        chapterList = new List<string>();
        showInfo = new List<dataentryOperatorTask>();
        LiveshowInfo = new List<dataentryOperatorTask>();
        allc = new List<Chapter>();
        allsub = new List<Subject>();
        allClass = new List<ClassInfo>();
        teacherList = new List<Teachers>();
    }
    public async Task RemoveTask(string taskID)
    {
        showLoadingRemoveTask = "Block";
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/deleteTask".PostJsonAsync(new
        {
            taskID = taskID
        }).
       ReceiveJson<Response>();
        await GetOperatorInfo();
        showLoadingRemoveTask = "None";
    }
    public async Task getOpe()
    {
        operatorListSelect = new List<string>();
        teacherList = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getAllTeacher".PostJsonAsync(new { }).ReceiveJson<List<Teachers>>();
        shiEMList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getshiEmployee".GetJsonAsync<List<shiEmployee>>();
        for (int z = 0; z < teacherList.Count; z++)
        {
            for (int k = 0; k < shiEMList.Count; k++)
            {
                if (shiEMList[k].employeeID == teacherList[z].teacherID)
                {
                    operatorListSelect.Add(teacherList[z].name);
                }
            }

        }
    }
    public async Task GetOperatorInfo()
    {
        await getOpe();
        allc = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();
        allsub = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();
        allClass = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();
        operatorList = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getdataentryOperatorTask".PostJsonAsync(new { }).ReceiveJson<List<dataentryOperatorTask>>();
        var thList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getTeacherQuestionHistory".GetJsonAsync<List<TecaherQuestionHistory>>();
        var quesList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestion".GetJsonAsync<List<Question>>();
        List<dataentryOperatorTask> thisOpList = new List<dataentryOperatorTask>();
        List<dataentryOperatorTask> LivethisOpList = new List<dataentryOperatorTask>();
        for (int t = 0; t < allClass.Count; t++)
        {
            classList.Add(allClass[t].name) ;
        }


        for (int i = 0; i < operatorList.Count; i++)
        {

            int submitted = 0;
            dataentryOperatorTask thisOp = new dataentryOperatorTask();

            thisOp = operatorList[i];
            for (int z = 0; z < teacherList.Count; z++)
            {
                if(thisOp.userID == teacherList[z].teacherID)
                {
                    thisOp.userName = teacherList[z].name;
                    break;
                }
            }
            for (int e = 0; e < allc.Count; e++)
            {
                if (allc[e].chapterID == thisOp.chapterID)
                {
                    thisOp.chapterName = allc[e].name;
                    break;
                }
            }
            int pending = 0;
            for (int j = 0; j < thList.Count; j++)
            {
                CultureInfo culture = new CultureInfo("en-US");
                DateTime HistoryDateFormat = DateTime.ParseExact(thList[j].review, "dd'-'MM'-'yyyy' 'HH':'mm':'ss", culture);
                DateTime TaskDateFormatSt = DateTime.ParseExact(operatorList[i].startTime, "MM/dd/yyyy hh:mm tt", culture);
                DateTime TaskDateFormatEnd = DateTime.ParseExact(operatorList[i].endTime, "MM/dd/yyyy hh:mm tt", culture);
                if (operatorList[i].userID == thList[j].teacherID & TaskDateFormatSt < HistoryDateFormat && TaskDateFormatEnd > HistoryDateFormat)
                {
                    submitted++;

                    for(int k = 0; k < quesList.Count; k++)
                    {
                        if(thList[j].questionID == quesList[k].questionID)
                        {
                            if(quesList[k].review == 0)
                            {
                                pending++;
                            }
                        }
                    }

                }
            }
            thisOp.reMain = 100 - submitted;
            thisOp.submitted = submitted;

            if (pending > 0 )
            {
                thisOp.isTaskApp = "Not Approved";
                thisOp.isTaskAppColor = "#979797";
            }
            else if(pending == 0 && submitted >= 150)
            {
                thisOp.isTaskApp = "Approved";
                thisOp.isTaskAppColor = "#B590FD";
            }
            else if(pending == 0 && submitted < 150)
            {
                thisOp.isTaskApp = "Not Approved";
                thisOp.isTaskAppColor = "#979797";
            }
            CultureInfo culturen = new CultureInfo("en-US");
            var taskTime = DateTime.ParseExact(thisOp.endTime, "MM/dd/yyyy hh:mm tt", culturen);
            if (taskTime > DateTime.Now)
            {
                thisOp.statusColor = "#541BD7";
                thisOp.isTaskSubPending = "Block";
                thisOp.isTaskSubDone = "None";
                thisOp.isTaskSubNootDone = "None";
                thisOp.isTaskSubColor = "#BFB10C";
                thisOp.status = "Active";
            }
            else
            {
                thisOp.statusColor = "#979797";
                if (submitted >= 100)
                {
                    thisOp.isTaskSubDone = "Block";
                    thisOp.isTaskSubPending = "None";
                    thisOp.isTaskSubNootDone = "None";
                    thisOp.isTaskSubColor = "#08B483";
                }
                else
                {
                    thisOp.isTaskSubNootDone = "Block";
                    thisOp.isTaskSubDone = "None";
                    thisOp.isTaskSubPending = "None";
                    thisOp.isTaskSubColor = "#979797";
                }
                thisOp.status = "Inactive";
            }
            if(thisOp.reMain < 0)
            {
                thisOp.reMain = 0;
            }
            var nt = DateTime.ParseExact(thisOp.startTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOp.startTime = nt.ToString("dd/MM/yyyy hh:mm tt");
            nt = DateTime.ParseExact(thisOp.endTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOp.endTime = nt.ToString("dd/MM/yyyy hh:mm tt");
            thisOp.MCQNumbers = thisOp.MCQNumbers?[0..Math.Min(thisOp.MCQNumbers.Length, 50)];
            thisOpList.Add(thisOp);

        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = thisOpList.OrderBy(x => x.endTime).ToList();
        SortedList.Reverse();
        thisOpList = SortedList;
        showInfo = thisOpList;
    }



    private void SelectedOperator(ChangeEventArgs dateEvent)
    {
        for (int i = 0; i < teacherList.Count; i++)
        {
            if (teacherList[i].name == dateEvent.Value.ToString())
            {
                for(int j = 0; j < shiEMList.Count; j++)
                {
                    if(shiEMList[j].employeeID == teacherList[i].teacherID)
                    {
                        selecteOPID = teacherList[i].teacherID;
                        break;
                    }
                }


            }

        }
    }
    private void SelectedChapter(ChangeEventArgs dateEvent)
    {
        for(int i = 0; i < allc.Count; i++)
        {
            string cchp = "";
            foreach (var ch in dateEvent.Value.ToString())
            {
                if (ch == '-')
                {
                    break;
                }
                else
                {
                    cchp += ch;
                }
            }
            if (allc[i].name == cchp)
            {

                selectedChapterName = cchp;
                SelectedChapterID = allc[i].chapterID;
                break;
            }
        }

    }
    private void SelectedClass(ChangeEventArgs dateEvent)
    {
        string thisClsName = dateEvent.Value.ToString();
        subjectList = new List<string>();
        List<string> thissub = new List<string>();
        for (int i = 0; i < allClass.Count; i++)
        {
            if (allClass[i].name == thisClsName)
            {
                for (int j = 0; j < allsub.Count; j++)
                {
                    if (allsub[j].classID == allClass[i].classID)
                    {
                        thissub.Add(allsub[j].name + "-" + allsub[j].subjectID);
                    }
                }

            }
        }

        subjectList = thissub;
    }
    private void SelectedSubject(ChangeEventArgs dateEvent)
    {
        string thisSubName = dateEvent.Value.ToString();
        string cleanSub = "";
        foreach(var ch in thisSubName)
        {
            if (ch == '-')
            {
                break;
            }
            else
            {
                cleanSub += ch;
            }
        }
        thisSubName = cleanSub;

        chapterList = new List<string>();
        List<string> thisch = new List<string>();


        for (int i = 0; i < allsub.Count; i++)
        {
            if(allsub[i].name == thisSubName)
            {
                for (int j = 0; j < allc.Count; j++)
                {
                    if (allc[j].subjectID == allsub[i].subjectID)
                    {
                        thisch.Add(allc[j].name + "-" + allc[j].chapterID);
                    }
                }

            }
        }
        chapterList = thisch;
    }
    [Inject]
    public NavigationManager nvi { get; set; }

    public async Task Logout()
    {
        await oLocalStore.ClearAsync();
        string redirectURL = "/";
        nvi.NavigateTo(redirectURL);
    }
    public void CopyNum()
    {
        selectedMCQList = "";
        numList = new List<int>();
        Random rn = new Random();

        List<int> list = new List<int>();

        int totalChQNum = Convert.ToInt32(totalChapQues);
        int reqNum = Convert.ToInt32(limit);
        while (list.Count <= reqNum)
        {
            int thisNum = rn.Next(1, totalChQNum);
            bool match = false;
            for (int j = 0; j < list.Count; j++)
            {
                if (list[j] == thisNum)
                {
                    match = true;
                    break;
                }
            }
            if (!match)
            {
                list.Add(thisNum);
            }
        }
        numList = list;


        List<int> SortedList = new List<int>();
        SortedList = numList.OrderBy(x => x).ToList();
        numList = SortedList;
        for (int i = 0; i < numList.Count; i++)
        {
            if(i == numList.Count - 1)
            {
                selectedMCQList = selectedMCQList + numList[i];
            }
            else
            {
                selectedMCQList = selectedMCQList + numList[i] + " , ";
            }

        }
    }
    public async Task assignTask()
    {
        showLoading = "Block";
        if (selecteOPID != 0 && selectedMCQList != "" && selectedMCQList != null && Link != "" || Link != null && SelectedChapterID != 0)
        {
            BtnString = "Connecting with server...";
            Random random = new Random();
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            var id = RandomString(50);
            string sd = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            string ed = DateTime.Now.AddDays(1).ToString("MM/dd/yyyy hh:mm tt");
            string thisd = DateTime.Now.ToString("dddd, dd MMMM yyyy");

            var res1 = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/setdataentryOperatorTask".PostUrlEncodedAsync(new
            {
                userID = selecteOPID,
                MCQNumbers = selectedMCQList + " Link#" + Link,
                date = thisd,
                chapterID = SelectedChapterID,
                taskID = id,
                startTime = sd,
                endTime = ed
            })
    .ReceiveJson<Response>();
            RefreshList();
            await GetOperatorInfo();
            BtnString = "Done!";
            await Task.Delay(3000);
            BtnString = "Assign Task";
        }
        else
        {
            BtnString = "Please fill up every info";
            await Task.Delay(3000);
            BtnString = "Assign Task";
        }
        showLoading = "None";
    }
    private  Random random = new Random();
    public string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

}


















